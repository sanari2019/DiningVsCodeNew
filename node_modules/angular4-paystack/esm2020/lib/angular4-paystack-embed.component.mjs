import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./angular4-paystack.service";
export class Angular4PaystackEmbedComponent {
    constructor(paystackService) {
        this.paystackService = paystackService;
        this.paymentInit = new EventEmitter();
        this.onClose = new EventEmitter(); // tslint:disable-line
        this.callback = new EventEmitter();
    }
    async pay() {
        let errorText = '';
        if (this.paystackOptions && Object.keys(this.paystackOptions).length >= 2) {
            errorText = this.valdateInput(this.paystackOptions);
            this.generateOptions(this.paystackOptions);
        }
        else {
            errorText = this.valdateInput(this);
            this.generateOptions(this);
        }
        if (errorText) {
            console.error(errorText);
            return errorText;
        }
        await this.paystackService.loadScript();
        if (this.paymentInit.observers.length) {
            this.paymentInit.emit();
        }
        const payment = window.PaystackPop.setup(this._paystackOptions);
        payment.openIframe();
        return '';
    }
    valdateInput(obj) {
        if (!this.callback.observers.length) {
            return 'ANGULAR-PAYSTACK: Insert a callback output like so (callback)=\'PaymentComplete($event)\' to check payment status';
        }
        return this.paystackService.checkInput(obj);
    }
    generateOptions(obj) {
        this._paystackOptions = this.paystackService.getPaystackOptions(obj);
        this._paystackOptions.onClose = () => {
            if (this.onClose.observers.length) {
                this.onClose.emit();
            }
        };
        this._paystackOptions.callback = (...response) => {
            this.callback.emit(...response);
        };
    }
    async ngOnInit() {
        console.error('ANGULAR-PAYSTACK: The paystack embed option is deprecated. Please use the paystack component or directive');
        this.pay();
    }
}
Angular4PaystackEmbedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.4", ngImport: i0, type: Angular4PaystackEmbedComponent, deps: [{ token: i1.Angular4PaystackService }], target: i0.ɵɵFactoryTarget.Component });
Angular4PaystackEmbedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.4", type: Angular4PaystackEmbedComponent, selector: "angular4-paystack-embed", inputs: { key: "key", email: "email", amount: "amount", metadata: "metadata", channels: "channels", ref: "ref", currency: "currency", plan: "plan", quantity: "quantity", subaccount: "subaccount", transaction_charge: "transaction_charge", bearer: "bearer", paystackOptions: "paystackOptions" }, outputs: { paymentInit: "paymentInit", onClose: "onClose", callback: "callback" }, ngImport: i0, template: `<div id="paystackEmbedContainer"></div>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.4", ngImport: i0, type: Angular4PaystackEmbedComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'angular4-paystack-embed',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: `<div id="paystackEmbedContainer"></div>`
                }]
        }], ctorParameters: function () { return [{ type: i1.Angular4PaystackService }]; }, propDecorators: { key: [{
                type: Input
            }], email: [{
                type: Input
            }], amount: [{
                type: Input
            }], metadata: [{
                type: Input
            }], channels: [{
                type: Input
            }], ref: [{
                type: Input
            }], currency: [{
                type: Input
            }], plan: [{
                type: Input
            }], quantity: [{
                type: Input
            }], subaccount: [{
                type: Input
            }], transaction_charge: [{
                type: Input
            }], bearer: [{
                type: Input
            }], paystackOptions: [{
                type: Input
            }], paymentInit: [{
                type: Output
            }], onClose: [{
                type: Output
            }], callback: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhcjQtcGF5c3RhY2stZW1iZWQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhcjQtcGF5c3RhY2svc3JjL2xpYi9hbmd1bGFyNC1wYXlzdGFjay1lbWJlZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBZXhHLE1BQU0sT0FBTyw4QkFBOEI7SUFtQnpDLFlBQW9CLGVBQXdDO1FBQXhDLG9CQUFlLEdBQWYsZUFBZSxDQUF5QjtRQUxsRCxnQkFBVyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO1FBQ3pELFlBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQyxDQUFDLHNCQUFzQjtRQUM1RSxhQUFRLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7SUFHRCxDQUFDO0lBRWhFLEtBQUssQ0FBQyxHQUFHO1FBQ1AsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ25CLElBQUksSUFBSSxDQUFDLGVBQWUsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1lBQ3pFLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUNwRCxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUM1QzthQUFNO1lBQ0wsU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDcEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM1QjtRQUNELElBQUksU0FBUyxFQUFFO1lBQ2IsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN6QixPQUFPLFNBQVMsQ0FBQztTQUNsQjtRQUNELE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUN4QyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRTtZQUNyQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ3pCO1FBQ0QsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDaEUsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3JCLE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQUVELFlBQVksQ0FBQyxHQUFvQjtRQUMvQixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFO1lBQ25DLE9BQU8sbUhBQW1ILENBQUM7U0FDNUg7UUFDRCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCxlQUFlLENBQUMsR0FBb0I7UUFDbEMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sR0FBRyxHQUFHLEVBQUU7WUFDbkMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUU7Z0JBQ2pDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDckI7UUFDSCxDQUFDLENBQUM7UUFDRixJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxHQUFHLENBQUMsR0FBRyxRQUFRLEVBQUUsRUFBRTtZQUMvQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxLQUFLLENBQUMsUUFBUTtRQUNaLE9BQU8sQ0FBQyxLQUFLLENBQ1gsMkdBQTJHLENBQzVHLENBQUM7UUFDRixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDYixDQUFDOzsySEFuRVUsOEJBQThCOytHQUE5Qiw4QkFBOEIsd2JBSC9CLHlDQUF5QzsyRkFHeEMsOEJBQThCO2tCQU4xQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSx5QkFBeUI7b0JBQ25DLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxRQUFRLEVBQUUseUNBQXlDO2lCQUNwRDs4R0FHVSxHQUFHO3NCQUFYLEtBQUs7Z0JBQ0csS0FBSztzQkFBYixLQUFLO2dCQUNHLE1BQU07c0JBQWQsS0FBSztnQkFDRyxRQUFRO3NCQUFoQixLQUFLO2dCQUNHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBQ0csR0FBRztzQkFBWCxLQUFLO2dCQUNHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBQ0csSUFBSTtzQkFBWixLQUFLO2dCQUNHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBQ0csVUFBVTtzQkFBbEIsS0FBSztnQkFDRyxrQkFBa0I7c0JBQTFCLEtBQUs7Z0JBQ0csTUFBTTtzQkFBZCxLQUFLO2dCQUNHLGVBQWU7c0JBQXZCLEtBQUs7Z0JBQ0ksV0FBVztzQkFBcEIsTUFBTTtnQkFDRyxPQUFPO3NCQUFoQixNQUFNO2dCQUNHLFFBQVE7c0JBQWpCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGF5c3RhY2tPcHRpb25zLCBQcml2YXRlUGF5c3RhY2tPcHRpb25zIH0gZnJvbSAnLi9wYXlzdGFjay1vcHRpb25zJztcbmltcG9ydCB7IEFuZ3VsYXI0UGF5c3RhY2tTZXJ2aWNlIH0gZnJvbSAnLi9hbmd1bGFyNC1wYXlzdGFjay5zZXJ2aWNlJztcblxuaW50ZXJmYWNlIE15V2luZG93IGV4dGVuZHMgV2luZG93IHtcbiAgUGF5c3RhY2tQb3A6IGFueTtcbn1cbmRlY2xhcmUgdmFyIHdpbmRvdzogUGFydGlhbDxNeVdpbmRvdz47XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FuZ3VsYXI0LXBheXN0YWNrLWVtYmVkJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiBgPGRpdiBpZD1cInBheXN0YWNrRW1iZWRDb250YWluZXJcIj48L2Rpdj5gXG59KVxuXG5leHBvcnQgY2xhc3MgQW5ndWxhcjRQYXlzdGFja0VtYmVkQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkga2V5OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGVtYWlsOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGFtb3VudDogbnVtYmVyO1xuICBASW5wdXQoKSBtZXRhZGF0YToge307XG4gIEBJbnB1dCgpIGNoYW5uZWxzOiBzdHJpbmdbXTtcbiAgQElucHV0KCkgcmVmOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGN1cnJlbmN5OiBzdHJpbmc7XG4gIEBJbnB1dCgpIHBsYW46IHN0cmluZztcbiAgQElucHV0KCkgcXVhbnRpdHk6IHN0cmluZztcbiAgQElucHV0KCkgc3ViYWNjb3VudDogc3RyaW5nO1xuICBASW5wdXQoKSB0cmFuc2FjdGlvbl9jaGFyZ2U6IG51bWJlcjsgLy8gdHNsaW50OmRpc2FibGUtbGluZVxuICBASW5wdXQoKSBiZWFyZXI6IHN0cmluZztcbiAgQElucHV0KCkgcGF5c3RhY2tPcHRpb25zOiBQYXlzdGFja09wdGlvbnM7XG4gIEBPdXRwdXQoKSBwYXltZW50SW5pdDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgQE91dHB1dCgpIG9uQ2xvc2U6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7IC8vIHRzbGludDpkaXNhYmxlLWxpbmVcbiAgQE91dHB1dCgpIGNhbGxiYWNrOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBwdWJsaWMgX3BheXN0YWNrT3B0aW9uczogUGFydGlhbDxQcml2YXRlUGF5c3RhY2tPcHRpb25zPjsgLy8gdHNsaW50OmRpc2FibGUtbGluZVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcGF5c3RhY2tTZXJ2aWNlOiBBbmd1bGFyNFBheXN0YWNrU2VydmljZSkge31cblxuICBhc3luYyBwYXkoKSB7XG4gICAgbGV0IGVycm9yVGV4dCA9ICcnO1xuICAgIGlmICh0aGlzLnBheXN0YWNrT3B0aW9ucyAmJiBPYmplY3Qua2V5cyh0aGlzLnBheXN0YWNrT3B0aW9ucykubGVuZ3RoID49IDIpIHtcbiAgICAgIGVycm9yVGV4dCA9IHRoaXMudmFsZGF0ZUlucHV0KHRoaXMucGF5c3RhY2tPcHRpb25zKTtcbiAgICAgIHRoaXMuZ2VuZXJhdGVPcHRpb25zKHRoaXMucGF5c3RhY2tPcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXJyb3JUZXh0ID0gdGhpcy52YWxkYXRlSW5wdXQodGhpcyk7XG4gICAgICB0aGlzLmdlbmVyYXRlT3B0aW9ucyh0aGlzKTtcbiAgICB9XG4gICAgaWYgKGVycm9yVGV4dCkge1xuICAgICAgY29uc29sZS5lcnJvcihlcnJvclRleHQpO1xuICAgICAgcmV0dXJuIGVycm9yVGV4dDtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5wYXlzdGFja1NlcnZpY2UubG9hZFNjcmlwdCgpO1xuICAgIGlmICh0aGlzLnBheW1lbnRJbml0Lm9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgIHRoaXMucGF5bWVudEluaXQuZW1pdCgpO1xuICAgIH1cbiAgICBjb25zdCBwYXltZW50ID0gd2luZG93LlBheXN0YWNrUG9wLnNldHVwKHRoaXMuX3BheXN0YWNrT3B0aW9ucyk7XG4gICAgcGF5bWVudC5vcGVuSWZyYW1lKCk7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgdmFsZGF0ZUlucHV0KG9iajogUGF5c3RhY2tPcHRpb25zKSB7XG4gICAgaWYgKCF0aGlzLmNhbGxiYWNrLm9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiAnQU5HVUxBUi1QQVlTVEFDSzogSW5zZXJ0IGEgY2FsbGJhY2sgb3V0cHV0IGxpa2Ugc28gKGNhbGxiYWNrKT1cXCdQYXltZW50Q29tcGxldGUoJGV2ZW50KVxcJyB0byBjaGVjayBwYXltZW50IHN0YXR1cyc7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnBheXN0YWNrU2VydmljZS5jaGVja0lucHV0KG9iaik7XG4gIH1cblxuICBnZW5lcmF0ZU9wdGlvbnMob2JqOiBQYXlzdGFja09wdGlvbnMpIHtcbiAgICB0aGlzLl9wYXlzdGFja09wdGlvbnMgPSB0aGlzLnBheXN0YWNrU2VydmljZS5nZXRQYXlzdGFja09wdGlvbnMob2JqKTtcbiAgICB0aGlzLl9wYXlzdGFja09wdGlvbnMub25DbG9zZSA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLm9uQ2xvc2Uub2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLm9uQ2xvc2UuZW1pdCgpO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5fcGF5c3RhY2tPcHRpb25zLmNhbGxiYWNrID0gKC4uLnJlc3BvbnNlKSA9PiB7XG4gICAgICB0aGlzLmNhbGxiYWNrLmVtaXQoLi4ucmVzcG9uc2UpO1xuICAgIH07XG4gIH1cblxuICBhc3luYyBuZ09uSW5pdCgpIHtcbiAgICBjb25zb2xlLmVycm9yKFxuICAgICAgJ0FOR1VMQVItUEFZU1RBQ0s6IFRoZSBwYXlzdGFjayBlbWJlZCBvcHRpb24gaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSB0aGUgcGF5c3RhY2sgY29tcG9uZW50IG9yIGRpcmVjdGl2ZSdcbiAgICApO1xuICAgIHRoaXMucGF5KCk7XG4gIH1cblxufVxuIl19