import { Directive, Input, Output, EventEmitter, HostListener } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./angular4-paystack.service";
export class Angular4PaystackDirective {
    constructor(paystackService) {
        this.paystackService = paystackService;
        this.paymentInit = new EventEmitter(); // tslint:disable-line
        this.onClose = new EventEmitter(); // tslint:disable-line
        this.callback = new EventEmitter();
        this.isPaying = false;
    }
    async pay() {
        let errorText = '';
        if (this.paystackOptions && Object.keys(this.paystackOptions).length >= 2) {
            errorText = this.valdateInput(this.paystackOptions);
            this.generateOptions(this.paystackOptions);
        }
        else {
            errorText = this.valdateInput(this);
            this.generateOptions(this);
        }
        if (errorText) {
            console.error(errorText);
            return errorText;
        }
        await this.paystackService.loadScript();
        if (this.isPaying) {
            return;
        }
        if (this.paymentInit.observers.length) {
            this.paymentInit.emit();
        }
        const payment = window.PaystackPop.setup(this._paystackOptions);
        payment.openIframe();
        this.isPaying = true;
        return '';
    }
    valdateInput(obj) {
        if (!this.callback.observers.length) {
            return 'ANGULAR-PAYSTACK: Insert a callback output like so (callback)=\'PaymentComplete($event)\' to check payment status';
        }
        return this.paystackService.checkInput(obj);
    }
    generateOptions(obj) {
        this._paystackOptions = this.paystackService.getPaystackOptions(obj);
        this._paystackOptions.onClose = () => {
            if (this.onClose.observers.length) {
                this.isPaying = false;
                this.onClose.emit();
            }
        };
        this._paystackOptions.callback = (...response) => {
            this.isPaying = false;
            this.callback.emit(...response);
        };
    }
    async buttonClick() {
        this.pay();
    }
}
Angular4PaystackDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.4", ngImport: i0, type: Angular4PaystackDirective, deps: [{ token: i1.Angular4PaystackService }], target: i0.ɵɵFactoryTarget.Directive });
Angular4PaystackDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.1.4", type: Angular4PaystackDirective, selector: "[angular4-paystack]", inputs: { key: "key", email: "email", amount: "amount", metadata: "metadata", ref: "ref", currency: "currency", plan: "plan", quantity: "quantity", subaccount: "subaccount", channels: "channels", transaction_charge: "transaction_charge", bearer: "bearer", class: "class", style: "style", paystackOptions: "paystackOptions" }, outputs: { paymentInit: "paymentInit", onClose: "onClose", callback: "callback" }, host: { listeners: { "click": "buttonClick()" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.4", ngImport: i0, type: Angular4PaystackDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[angular4-paystack]', // tslint:disable-line
                }]
        }], ctorParameters: function () { return [{ type: i1.Angular4PaystackService }]; }, propDecorators: { key: [{
                type: Input
            }], email: [{
                type: Input
            }], amount: [{
                type: Input
            }], metadata: [{
                type: Input
            }], ref: [{
                type: Input
            }], currency: [{
                type: Input
            }], plan: [{
                type: Input
            }], quantity: [{
                type: Input
            }], subaccount: [{
                type: Input
            }], channels: [{
                type: Input
            }], transaction_charge: [{
                type: Input
            }], bearer: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], paystackOptions: [{
                type: Input
            }], paymentInit: [{
                type: Output
            }], onClose: [{
                type: Output
            }], callback: [{
                type: Output
            }], buttonClick: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhcjQtcGF5c3RhY2suZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhcjQtcGF5c3RhY2svc3JjL2xpYi9hbmd1bGFyNC1wYXlzdGFjay5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQWNyRixNQUFNLE9BQU8seUJBQXlCO0lBc0JwQyxZQUFvQixlQUF3QztRQUF4QyxvQkFBZSxHQUFmLGVBQWUsQ0FBeUI7UUFObEQsZ0JBQVcsR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQyxDQUFDLHNCQUFzQjtRQUNoRixZQUFPLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUMsQ0FBQyxzQkFBc0I7UUFDNUUsYUFBUSxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO1FBRXhELGFBQVEsR0FBRyxLQUFLLENBQUM7SUFFc0MsQ0FBQztJQUVoRSxLQUFLLENBQUMsR0FBRztRQUNQLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNuQixJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUN6RSxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDcEQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDNUM7YUFBTTtZQUNMLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDNUI7UUFDRCxJQUFJLFNBQVMsRUFBRTtZQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDekIsT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFDRCxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDeEMsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQUUsT0FBTztTQUFFO1FBQzlCLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFO1lBQ3JDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDekI7UUFDRCxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNoRSxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRUQsWUFBWSxDQUFDLEdBQW9CO1FBQy9CLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUU7WUFDbkMsT0FBTyxtSEFBbUgsQ0FBQztTQUM1SDtRQUNELE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELGVBQWUsQ0FBQyxHQUFvQjtRQUNsQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxHQUFHLEdBQUcsRUFBRTtZQUNuQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRTtnQkFDakMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7Z0JBQ3RCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDckI7UUFDSCxDQUFDLENBQUM7UUFDRixJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxHQUFHLENBQUMsR0FBRyxRQUFRLEVBQUUsRUFBRTtZQUMvQyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztZQUN0QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFHRCxLQUFLLENBQUMsV0FBVztRQUNmLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNiLENBQUM7O3NIQXhFVSx5QkFBeUI7MEdBQXpCLHlCQUF5QjsyRkFBekIseUJBQXlCO2tCQUhyQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxxQkFBcUIsRUFBRSxzQkFBc0I7aUJBQ3hEOzhHQUVVLEdBQUc7c0JBQVgsS0FBSztnQkFDRyxLQUFLO3NCQUFiLEtBQUs7Z0JBQ0csTUFBTTtzQkFBZCxLQUFLO2dCQUNHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBQ0csR0FBRztzQkFBWCxLQUFLO2dCQUNHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBQ0csSUFBSTtzQkFBWixLQUFLO2dCQUNHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBQ0csVUFBVTtzQkFBbEIsS0FBSztnQkFDRyxRQUFRO3NCQUFoQixLQUFLO2dCQUNHLGtCQUFrQjtzQkFBMUIsS0FBSztnQkFDRyxNQUFNO3NCQUFkLEtBQUs7Z0JBQ0csS0FBSztzQkFBYixLQUFLO2dCQUNHLEtBQUs7c0JBQWIsS0FBSztnQkFDRyxlQUFlO3NCQUF2QixLQUFLO2dCQUNJLFdBQVc7c0JBQXBCLE1BQU07Z0JBQ0csT0FBTztzQkFBaEIsTUFBTTtnQkFDRyxRQUFRO3NCQUFqQixNQUFNO2dCQW9ERCxXQUFXO3NCQURoQixZQUFZO3VCQUFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQYXlzdGFja09wdGlvbnMsIFByaXZhdGVQYXlzdGFja09wdGlvbnMgfSBmcm9tICcuL3BheXN0YWNrLW9wdGlvbnMnO1xuaW1wb3J0IHsgQW5ndWxhcjRQYXlzdGFja1NlcnZpY2UgfSBmcm9tICcuL2FuZ3VsYXI0LXBheXN0YWNrLnNlcnZpY2UnO1xuXG5pbnRlcmZhY2UgTXlXaW5kb3cgZXh0ZW5kcyBXaW5kb3cge1xuICBQYXlzdGFja1BvcDoge1xuICAgIHNldHVwKG9wdGlvbnM6IFBhcnRpYWw8UGF5c3RhY2tPcHRpb25zPik6IHsgb3BlbklmcmFtZSgpOiBhbnkgfVxuICB9O1xufVxuZGVjbGFyZSB2YXIgd2luZG93OiBNeVdpbmRvdztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2FuZ3VsYXI0LXBheXN0YWNrXScsIC8vIHRzbGludDpkaXNhYmxlLWxpbmVcbn0pXG5leHBvcnQgY2xhc3MgQW5ndWxhcjRQYXlzdGFja0RpcmVjdGl2ZSB7XG4gIEBJbnB1dCgpIGtleTogc3RyaW5nO1xuICBASW5wdXQoKSBlbWFpbDogc3RyaW5nO1xuICBASW5wdXQoKSBhbW91bnQ6IG51bWJlcjtcbiAgQElucHV0KCkgbWV0YWRhdGE6IHt9O1xuICBASW5wdXQoKSByZWY6IHN0cmluZztcbiAgQElucHV0KCkgY3VycmVuY3k6IHN0cmluZztcbiAgQElucHV0KCkgcGxhbjogc3RyaW5nO1xuICBASW5wdXQoKSBxdWFudGl0eTogc3RyaW5nO1xuICBASW5wdXQoKSBzdWJhY2NvdW50OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGNoYW5uZWxzOiBzdHJpbmdbXTtcbiAgQElucHV0KCkgdHJhbnNhY3Rpb25fY2hhcmdlOiBudW1iZXI7IC8vIHRzbGludDpkaXNhYmxlLWxpbmVcbiAgQElucHV0KCkgYmVhcmVyOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGNsYXNzOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHN0eWxlOiBvYmplY3Q7XG4gIEBJbnB1dCgpIHBheXN0YWNrT3B0aW9uczogUGF5c3RhY2tPcHRpb25zO1xuICBAT3V0cHV0KCkgcGF5bWVudEluaXQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7IC8vIHRzbGludDpkaXNhYmxlLWxpbmVcbiAgQE91dHB1dCgpIG9uQ2xvc2U6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7IC8vIHRzbGludDpkaXNhYmxlLWxpbmVcbiAgQE91dHB1dCgpIGNhbGxiYWNrOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBwcml2YXRlIF9wYXlzdGFja09wdGlvbnM6IFBhcnRpYWw8UHJpdmF0ZVBheXN0YWNrT3B0aW9ucz47IC8vIHRzbGludDpkaXNhYmxlLWxpbmVcbiAgcHJpdmF0ZSBpc1BheWluZyA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcGF5c3RhY2tTZXJ2aWNlOiBBbmd1bGFyNFBheXN0YWNrU2VydmljZSkge31cblxuICBhc3luYyBwYXkoKSB7XG4gICAgbGV0IGVycm9yVGV4dCA9ICcnO1xuICAgIGlmICh0aGlzLnBheXN0YWNrT3B0aW9ucyAmJiBPYmplY3Qua2V5cyh0aGlzLnBheXN0YWNrT3B0aW9ucykubGVuZ3RoID49IDIpIHtcbiAgICAgIGVycm9yVGV4dCA9IHRoaXMudmFsZGF0ZUlucHV0KHRoaXMucGF5c3RhY2tPcHRpb25zKTtcbiAgICAgIHRoaXMuZ2VuZXJhdGVPcHRpb25zKHRoaXMucGF5c3RhY2tPcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXJyb3JUZXh0ID0gdGhpcy52YWxkYXRlSW5wdXQodGhpcyk7XG4gICAgICB0aGlzLmdlbmVyYXRlT3B0aW9ucyh0aGlzKTtcbiAgICB9XG4gICAgaWYgKGVycm9yVGV4dCkge1xuICAgICAgY29uc29sZS5lcnJvcihlcnJvclRleHQpO1xuICAgICAgcmV0dXJuIGVycm9yVGV4dDtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5wYXlzdGFja1NlcnZpY2UubG9hZFNjcmlwdCgpO1xuICAgIGlmICh0aGlzLmlzUGF5aW5nKSB7IHJldHVybjsgfVxuICAgIGlmICh0aGlzLnBheW1lbnRJbml0Lm9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgIHRoaXMucGF5bWVudEluaXQuZW1pdCgpO1xuICAgIH1cbiAgICBjb25zdCBwYXltZW50ID0gd2luZG93LlBheXN0YWNrUG9wLnNldHVwKHRoaXMuX3BheXN0YWNrT3B0aW9ucyk7XG4gICAgcGF5bWVudC5vcGVuSWZyYW1lKCk7XG4gICAgdGhpcy5pc1BheWluZyA9IHRydWU7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgdmFsZGF0ZUlucHV0KG9iajogUGF5c3RhY2tPcHRpb25zKSB7XG4gICAgaWYgKCF0aGlzLmNhbGxiYWNrLm9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiAnQU5HVUxBUi1QQVlTVEFDSzogSW5zZXJ0IGEgY2FsbGJhY2sgb3V0cHV0IGxpa2Ugc28gKGNhbGxiYWNrKT1cXCdQYXltZW50Q29tcGxldGUoJGV2ZW50KVxcJyB0byBjaGVjayBwYXltZW50IHN0YXR1cyc7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnBheXN0YWNrU2VydmljZS5jaGVja0lucHV0KG9iaik7XG4gIH1cblxuICBnZW5lcmF0ZU9wdGlvbnMob2JqOiBQYXlzdGFja09wdGlvbnMpIHtcbiAgICB0aGlzLl9wYXlzdGFja09wdGlvbnMgPSB0aGlzLnBheXN0YWNrU2VydmljZS5nZXRQYXlzdGFja09wdGlvbnMob2JqKTtcbiAgICB0aGlzLl9wYXlzdGFja09wdGlvbnMub25DbG9zZSA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLm9uQ2xvc2Uub2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLmlzUGF5aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMub25DbG9zZS5lbWl0KCk7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLl9wYXlzdGFja09wdGlvbnMuY2FsbGJhY2sgPSAoLi4ucmVzcG9uc2UpID0+IHtcbiAgICAgIHRoaXMuaXNQYXlpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuY2FsbGJhY2suZW1pdCguLi5yZXNwb25zZSk7XG4gICAgfTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgYXN5bmMgYnV0dG9uQ2xpY2soKSB7XG4gICAgdGhpcy5wYXkoKTtcbiAgfVxufVxuIl19