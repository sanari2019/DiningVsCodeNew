import { Injectable, Inject } from '@angular/core';
import { PUBLIC_KEY_TOKEN } from './paystack-token';
import * as i0 from "@angular/core";
export class Angular4PaystackService {
    constructor(token) {
        this.token = token;
    }
    loadScript() {
        return new Promise(resolve => {
            if (window.PaystackPop && typeof window.PaystackPop.setup === 'function') {
                resolve();
                return;
            }
            const script = window.document.createElement('script');
            window.document.head.appendChild(script);
            const onLoadFunc = () => {
                script.removeEventListener('load', onLoadFunc);
                resolve();
            };
            script.addEventListener('load', onLoadFunc);
            script.setAttribute('src', 'https://js.paystack.co/v1/inline.js');
        });
    }
    checkInput(obj) {
        if (!obj.key && !this.token) {
            return 'ANGULAR-PAYSTACK: Please insert a your public key';
        }
        if (!obj.email) {
            return 'ANGULAR-PAYSTACK: Paystack email cannot be empty';
        }
        if (!obj.amount) {
            return 'ANGULAR-PAYSTACK: Paystack amount cannot be empty';
        }
        if (!obj.ref) {
            return 'ANGULAR-PAYSTACK: Paystack ref cannot be empty';
        }
        return '';
    }
    getPaystackOptions(obj) {
        const paystackOptions = {
            key: obj.key || this.token,
            email: obj.email,
            amount: obj.amount,
            ref: obj.ref,
            metadata: obj.metadata || {},
            currency: obj.currency || 'NGN',
            plan: obj.plan || '',
            channels: obj.channels,
            quantity: obj.quantity || '',
            subaccount: obj.subaccount || '',
            transaction_charge: obj.transaction_charge || 0,
            bearer: obj.bearer || '',
        };
        return paystackOptions;
    }
}
Angular4PaystackService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.4", ngImport: i0, type: Angular4PaystackService, deps: [{ token: PUBLIC_KEY_TOKEN }], target: i0.ɵɵFactoryTarget.Injectable });
Angular4PaystackService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.1.4", ngImport: i0, type: Angular4PaystackService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.4", ngImport: i0, type: Angular4PaystackService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PUBLIC_KEY_TOKEN]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhcjQtcGF5c3RhY2suc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXI0LXBheXN0YWNrL3NyYy9saWIvYW5ndWxhcjQtcGF5c3RhY2suc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFhcEQsTUFBTSxPQUFPLHVCQUF1QjtJQUNsQyxZQUE4QyxLQUFhO1FBQWIsVUFBSyxHQUFMLEtBQUssQ0FBUTtJQUFHLENBQUM7SUFFeEQsVUFBVTtRQUNmLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDM0IsSUFBSSxNQUFNLENBQUMsV0FBVyxJQUFJLE9BQU8sTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEtBQUssVUFBVSxFQUFFO2dCQUN4RSxPQUFPLEVBQUUsQ0FBQztnQkFDVixPQUFPO2FBQ1I7WUFDRCxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN2RCxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDekMsTUFBTSxVQUFVLEdBQUcsR0FBRyxFQUFFO2dCQUN0QixNQUFNLENBQUMsbUJBQW1CLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO2dCQUMvQyxPQUFPLEVBQUUsQ0FBQztZQUNaLENBQUMsQ0FBQztZQUNGLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDNUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUscUNBQXFDLENBQUMsQ0FBQztRQUNwRSxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxVQUFVLENBQUMsR0FBNkI7UUFDdEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQzNCLE9BQU8sbURBQW1ELENBQUM7U0FDNUQ7UUFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRTtZQUNkLE9BQU8sa0RBQWtELENBQUM7U0FDM0Q7UUFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRTtZQUNmLE9BQU8sbURBQW1ELENBQUM7U0FDNUQ7UUFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtZQUNaLE9BQU8sZ0RBQWdELENBQUM7U0FDekQ7UUFDRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxHQUFvQjtRQUNyQyxNQUFNLGVBQWUsR0FBb0I7WUFDdkMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUs7WUFDMUIsS0FBSyxFQUFFLEdBQUcsQ0FBQyxLQUFLO1lBQ2hCLE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTTtZQUNsQixHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUc7WUFDWixRQUFRLEVBQUUsR0FBRyxDQUFDLFFBQVEsSUFBSSxFQUFFO1lBQzVCLFFBQVEsRUFBRSxHQUFHLENBQUMsUUFBUSxJQUFJLEtBQUs7WUFDL0IsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRTtZQUNwQixRQUFRLEVBQUUsR0FBRyxDQUFDLFFBQVE7WUFDdEIsUUFBUSxFQUFFLEdBQUcsQ0FBQyxRQUFRLElBQUksRUFBRTtZQUM1QixVQUFVLEVBQUUsR0FBRyxDQUFDLFVBQVUsSUFBSSxFQUFFO1lBQ2hDLGtCQUFrQixFQUFFLEdBQUcsQ0FBQyxrQkFBa0IsSUFBSSxDQUFDO1lBQy9DLE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTSxJQUFJLEVBQUU7U0FDekIsQ0FBQztRQUNGLE9BQU8sZUFBZSxDQUFDO0lBQ3pCLENBQUM7O29IQXBEVSx1QkFBdUIsa0JBQ2QsZ0JBQWdCO3dIQUR6Qix1QkFBdUIsY0FGdEIsTUFBTTsyRkFFUCx1QkFBdUI7a0JBSG5DLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzswQkFFYyxNQUFNOzJCQUFDLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUFVCTElDX0tFWV9UT0tFTiB9IGZyb20gJy4vcGF5c3RhY2stdG9rZW4nO1xuaW1wb3J0IHsgUGF5c3RhY2tPcHRpb25zIH0gZnJvbSAnLi9wYXlzdGFjay1vcHRpb25zJztcblxuaW50ZXJmYWNlIE15V2luZG93IGV4dGVuZHMgV2luZG93IHtcbiAgUGF5c3RhY2tQb3A6IHtcbiAgICBzZXR1cChvcHRpb25zOiBQYXJ0aWFsPFBheXN0YWNrT3B0aW9ucz4pOiB7IG9wZW5JZnJhbWUoKTogYW55IH1cbiAgfTtcbn1cbmRlY2xhcmUgdmFyIHdpbmRvdzogTXlXaW5kb3c7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBBbmd1bGFyNFBheXN0YWNrU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoUFVCTElDX0tFWV9UT0tFTikgcHJpdmF0ZSB0b2tlbjogc3RyaW5nKSB7fVxuXG4gIHB1YmxpYyBsb2FkU2NyaXB0KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIGlmICh3aW5kb3cuUGF5c3RhY2tQb3AgJiYgdHlwZW9mIHdpbmRvdy5QYXlzdGFja1BvcC5zZXR1cCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNjcmlwdCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgIHdpbmRvdy5kb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICBjb25zdCBvbkxvYWRGdW5jID0gKCkgPT4ge1xuICAgICAgICBzY3JpcHQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZCcsIG9uTG9hZEZ1bmMpO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9O1xuICAgICAgc2NyaXB0LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBvbkxvYWRGdW5jKTtcbiAgICAgIHNjcmlwdC5zZXRBdHRyaWJ1dGUoJ3NyYycsICdodHRwczovL2pzLnBheXN0YWNrLmNvL3YxL2lubGluZS5qcycpO1xuICAgIH0pO1xuICB9XG5cbiAgY2hlY2tJbnB1dChvYmo6IFBhcnRpYWw8UGF5c3RhY2tPcHRpb25zPik6IHN0cmluZyB7XG4gICAgaWYgKCFvYmoua2V5ICYmICF0aGlzLnRva2VuKSB7XG4gICAgICByZXR1cm4gJ0FOR1VMQVItUEFZU1RBQ0s6IFBsZWFzZSBpbnNlcnQgYSB5b3VyIHB1YmxpYyBrZXknO1xuICAgIH1cbiAgICBpZiAoIW9iai5lbWFpbCkge1xuICAgICAgcmV0dXJuICdBTkdVTEFSLVBBWVNUQUNLOiBQYXlzdGFjayBlbWFpbCBjYW5ub3QgYmUgZW1wdHknO1xuICAgIH1cbiAgICBpZiAoIW9iai5hbW91bnQpIHtcbiAgICAgIHJldHVybiAnQU5HVUxBUi1QQVlTVEFDSzogUGF5c3RhY2sgYW1vdW50IGNhbm5vdCBiZSBlbXB0eSc7XG4gICAgfVxuICAgIGlmICghb2JqLnJlZikge1xuICAgICAgcmV0dXJuICdBTkdVTEFSLVBBWVNUQUNLOiBQYXlzdGFjayByZWYgY2Fubm90IGJlIGVtcHR5JztcbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgZ2V0UGF5c3RhY2tPcHRpb25zKG9iajogUGF5c3RhY2tPcHRpb25zKTogUGF5c3RhY2tPcHRpb25zIHtcbiAgICBjb25zdCBwYXlzdGFja09wdGlvbnM6IFBheXN0YWNrT3B0aW9ucyA9IHtcbiAgICAgIGtleTogb2JqLmtleSB8fCB0aGlzLnRva2VuLFxuICAgICAgZW1haWw6IG9iai5lbWFpbCxcbiAgICAgIGFtb3VudDogb2JqLmFtb3VudCxcbiAgICAgIHJlZjogb2JqLnJlZixcbiAgICAgIG1ldGFkYXRhOiBvYmoubWV0YWRhdGEgfHwge30sXG4gICAgICBjdXJyZW5jeTogb2JqLmN1cnJlbmN5IHx8ICdOR04nLFxuICAgICAgcGxhbjogb2JqLnBsYW4gfHwgJycsXG4gICAgICBjaGFubmVsczogb2JqLmNoYW5uZWxzLFxuICAgICAgcXVhbnRpdHk6IG9iai5xdWFudGl0eSB8fCAnJyxcbiAgICAgIHN1YmFjY291bnQ6IG9iai5zdWJhY2NvdW50IHx8ICcnLFxuICAgICAgdHJhbnNhY3Rpb25fY2hhcmdlOiBvYmoudHJhbnNhY3Rpb25fY2hhcmdlIHx8IDAsIC8vIHRzbGludDpkaXNhYmxlLWxpbmVcbiAgICAgIGJlYXJlcjogb2JqLmJlYXJlciB8fCAnJyxcbiAgICB9O1xuICAgIHJldHVybiBwYXlzdGFja09wdGlvbnM7XG4gIH1cblxufVxuIl19