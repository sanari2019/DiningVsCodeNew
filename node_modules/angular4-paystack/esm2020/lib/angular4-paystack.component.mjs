import { Component, Input, Output, EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./angular4-paystack.service";
import * as i2 from "@angular/common";
export class Angular4PaystackComponent {
    constructor(paystackService) {
        this.paystackService = paystackService;
        this.paymentInit = new EventEmitter();
        this.onClose = new EventEmitter(); // tslint:disable-line
        this.callback = new EventEmitter();
        this.isPaying = false;
    }
    async pay() {
        let errorText = '';
        if (this.paystackOptions && Object.keys(this.paystackOptions).length >= 2) {
            errorText = this.valdateInput(this.paystackOptions);
            this.generateOptions(this.paystackOptions);
        }
        else {
            errorText = this.valdateInput(this);
            this.generateOptions(this);
        }
        if (errorText) {
            console.error(errorText);
            return errorText;
        }
        await this.paystackService.loadScript();
        if (this.isPaying) {
            return;
        }
        if (this.paymentInit.observers.length) {
            this.paymentInit.emit();
        }
        const payment = window.PaystackPop.setup(this._paystackOptions);
        payment.openIframe();
        this.isPaying = true;
        return '';
    }
    valdateInput(obj) {
        if (!this.callback.observers.length) {
            return 'ANGULAR-PAYSTACK: Insert a callback output like so (callback)=\'PaymentComplete($event)\' to check payment status';
        }
        return this.paystackService.checkInput(obj);
    }
    generateOptions(obj) {
        this._paystackOptions = this.paystackService.getPaystackOptions(obj);
        this._paystackOptions.onClose = () => {
            if (this.onClose.observers.length) {
                this.isPaying = false;
                this.onClose.emit();
            }
        };
        this._paystackOptions.callback = (...response) => {
            this.isPaying = false;
            this.callback.emit(...response);
        };
    }
}
Angular4PaystackComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.4", ngImport: i0, type: Angular4PaystackComponent, deps: [{ token: i1.Angular4PaystackService }], target: i0.ɵɵFactoryTarget.Component });
Angular4PaystackComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.4", type: Angular4PaystackComponent, selector: "angular4-paystack", inputs: { key: "key", email: "email", amount: "amount", metadata: "metadata", ref: "ref", currency: "currency", plan: "plan", quantity: "quantity", channels: "channels", subaccount: "subaccount", transaction_charge: "transaction_charge", bearer: "bearer", class: "class", style: "style", paystackOptions: "paystackOptions" }, outputs: { paymentInit: "paymentInit", onClose: "onClose", callback: "callback" }, ngImport: i0, template: `<button [ngClass]="class" [ngStyle]="style" (click)="pay()"><ng-content></ng-content></button>`, isInline: true, dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.4", ngImport: i0, type: Angular4PaystackComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'angular4-paystack',
                    template: `<button [ngClass]="class" [ngStyle]="style" (click)="pay()"><ng-content></ng-content></button>`,
                }]
        }], ctorParameters: function () { return [{ type: i1.Angular4PaystackService }]; }, propDecorators: { key: [{
                type: Input
            }], email: [{
                type: Input
            }], amount: [{
                type: Input
            }], metadata: [{
                type: Input
            }], ref: [{
                type: Input
            }], currency: [{
                type: Input
            }], plan: [{
                type: Input
            }], quantity: [{
                type: Input
            }], channels: [{
                type: Input
            }], subaccount: [{
                type: Input
            }], transaction_charge: [{
                type: Input
            }], bearer: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], paystackOptions: [{
                type: Input
            }], paymentInit: [{
                type: Output
            }], onClose: [{
                type: Output
            }], callback: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhcjQtcGF5c3RhY2suY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhcjQtcGF5c3RhY2svc3JjL2xpYi9hbmd1bGFyNC1wYXlzdGFjay5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQWF2RSxNQUFNLE9BQU8seUJBQXlCO0lBcUJwQyxZQUFvQixlQUF3QztRQUF4QyxvQkFBZSxHQUFmLGVBQWUsQ0FBeUI7UUFMbEQsZ0JBQVcsR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUN6RCxZQUFPLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUMsQ0FBQyxzQkFBc0I7UUFDNUUsYUFBUSxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO1FBRXhELGFBQVEsR0FBRyxLQUFLLENBQUM7SUFDc0MsQ0FBQztJQUVoRSxLQUFLLENBQUMsR0FBRztRQUNQLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNuQixJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUN6RSxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDcEQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDNUM7YUFBTTtZQUNMLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDNUI7UUFDRCxJQUFJLFNBQVMsRUFBRTtZQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDekIsT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFDRCxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDeEMsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQUUsT0FBTztTQUFFO1FBQzlCLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFO1lBQ3JDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDekI7UUFDRCxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNoRSxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRUQsWUFBWSxDQUFDLEdBQW9CO1FBQy9CLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUU7WUFDbkMsT0FBTyxtSEFBbUgsQ0FBQztTQUM1SDtRQUNELE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELGVBQWUsQ0FBQyxHQUFvQjtRQUNsQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxHQUFHLEdBQUcsRUFBRTtZQUNuQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRTtnQkFDakMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7Z0JBQ3RCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDckI7UUFDSCxDQUFDLENBQUM7UUFDRixJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxHQUFHLENBQUMsR0FBRyxRQUFRLEVBQUUsRUFBRTtZQUMvQyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztZQUN0QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQztJQUNKLENBQUM7O3NIQWxFVSx5QkFBeUI7MEdBQXpCLHlCQUF5QixrZEFGMUIsZ0dBQWdHOzJGQUUvRix5QkFBeUI7a0JBSnJDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtvQkFDN0IsUUFBUSxFQUFFLGdHQUFnRztpQkFDM0c7OEdBRVUsR0FBRztzQkFBWCxLQUFLO2dCQUNHLEtBQUs7c0JBQWIsS0FBSztnQkFDRyxNQUFNO3NCQUFkLEtBQUs7Z0JBQ0csUUFBUTtzQkFBaEIsS0FBSztnQkFDRyxHQUFHO3NCQUFYLEtBQUs7Z0JBQ0csUUFBUTtzQkFBaEIsS0FBSztnQkFDRyxJQUFJO3NCQUFaLEtBQUs7Z0JBQ0csUUFBUTtzQkFBaEIsS0FBSztnQkFDRyxRQUFRO3NCQUFoQixLQUFLO2dCQUNHLFVBQVU7c0JBQWxCLEtBQUs7Z0JBQ0csa0JBQWtCO3NCQUExQixLQUFLO2dCQUNHLE1BQU07c0JBQWQsS0FBSztnQkFDRyxLQUFLO3NCQUFiLEtBQUs7Z0JBQ0csS0FBSztzQkFBYixLQUFLO2dCQUNHLGVBQWU7c0JBQXZCLEtBQUs7Z0JBQ0ksV0FBVztzQkFBcEIsTUFBTTtnQkFDRyxPQUFPO3NCQUFoQixNQUFNO2dCQUNHLFFBQVE7c0JBQWpCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGF5c3RhY2tPcHRpb25zLCBQcml2YXRlUGF5c3RhY2tPcHRpb25zIH0gZnJvbSAnLi9wYXlzdGFjay1vcHRpb25zJztcbmltcG9ydCB7IEFuZ3VsYXI0UGF5c3RhY2tTZXJ2aWNlIH0gZnJvbSAnLi9hbmd1bGFyNC1wYXlzdGFjay5zZXJ2aWNlJztcblxuaW50ZXJmYWNlIE15V2luZG93IGV4dGVuZHMgV2luZG93IHtcbiAgUGF5c3RhY2tQb3A6IGFueTtcbn1cbmRlY2xhcmUgdmFyIHdpbmRvdzogTXlXaW5kb3c7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FuZ3VsYXI0LXBheXN0YWNrJyxcbiAgdGVtcGxhdGU6IGA8YnV0dG9uIFtuZ0NsYXNzXT1cImNsYXNzXCIgW25nU3R5bGVdPVwic3R5bGVcIiAoY2xpY2spPVwicGF5KClcIj48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9idXR0b24+YCxcbn0pXG5leHBvcnQgY2xhc3MgQW5ndWxhcjRQYXlzdGFja0NvbXBvbmVudCB7XG4gIEBJbnB1dCgpIGtleTogc3RyaW5nO1xuICBASW5wdXQoKSBlbWFpbDogc3RyaW5nO1xuICBASW5wdXQoKSBhbW91bnQ6IG51bWJlcjtcbiAgQElucHV0KCkgbWV0YWRhdGE6IHt9O1xuICBASW5wdXQoKSByZWY6IHN0cmluZztcbiAgQElucHV0KCkgY3VycmVuY3k6IHN0cmluZztcbiAgQElucHV0KCkgcGxhbjogc3RyaW5nO1xuICBASW5wdXQoKSBxdWFudGl0eTogc3RyaW5nO1xuICBASW5wdXQoKSBjaGFubmVsczogc3RyaW5nW107XG4gIEBJbnB1dCgpIHN1YmFjY291bnQ6IHN0cmluZztcbiAgQElucHV0KCkgdHJhbnNhY3Rpb25fY2hhcmdlOiBudW1iZXI7IC8vIHRzbGludDpkaXNhYmxlLWxpbmVcbiAgQElucHV0KCkgYmVhcmVyOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGNsYXNzOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHN0eWxlOiBvYmplY3Q7XG4gIEBJbnB1dCgpIHBheXN0YWNrT3B0aW9uczogUGF5c3RhY2tPcHRpb25zO1xuICBAT3V0cHV0KCkgcGF5bWVudEluaXQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIEBPdXRwdXQoKSBvbkNsb3NlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpOyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lXG4gIEBPdXRwdXQoKSBjYWxsYmFjazogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgcHVibGljIF9wYXlzdGFja09wdGlvbnM6IFBhcnRpYWw8UHJpdmF0ZVBheXN0YWNrT3B0aW9ucz47IC8vIHRzbGludDpkaXNhYmxlLWxpbmVcbiAgcHJpdmF0ZSBpc1BheWluZyA9IGZhbHNlO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBheXN0YWNrU2VydmljZTogQW5ndWxhcjRQYXlzdGFja1NlcnZpY2UpIHt9XG5cbiAgYXN5bmMgcGF5KCkge1xuICAgIGxldCBlcnJvclRleHQgPSAnJztcbiAgICBpZiAodGhpcy5wYXlzdGFja09wdGlvbnMgJiYgT2JqZWN0LmtleXModGhpcy5wYXlzdGFja09wdGlvbnMpLmxlbmd0aCA+PSAyKSB7XG4gICAgICBlcnJvclRleHQgPSB0aGlzLnZhbGRhdGVJbnB1dCh0aGlzLnBheXN0YWNrT3B0aW9ucyk7XG4gICAgICB0aGlzLmdlbmVyYXRlT3B0aW9ucyh0aGlzLnBheXN0YWNrT3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVycm9yVGV4dCA9IHRoaXMudmFsZGF0ZUlucHV0KHRoaXMpO1xuICAgICAgdGhpcy5nZW5lcmF0ZU9wdGlvbnModGhpcyk7XG4gICAgfVxuICAgIGlmIChlcnJvclRleHQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3JUZXh0KTtcbiAgICAgIHJldHVybiBlcnJvclRleHQ7XG4gICAgfVxuICAgIGF3YWl0IHRoaXMucGF5c3RhY2tTZXJ2aWNlLmxvYWRTY3JpcHQoKTtcbiAgICBpZiAodGhpcy5pc1BheWluZykgeyByZXR1cm47IH1cbiAgICBpZiAodGhpcy5wYXltZW50SW5pdC5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLnBheW1lbnRJbml0LmVtaXQoKTtcbiAgICB9XG4gICAgY29uc3QgcGF5bWVudCA9IHdpbmRvdy5QYXlzdGFja1BvcC5zZXR1cCh0aGlzLl9wYXlzdGFja09wdGlvbnMpO1xuICAgIHBheW1lbnQub3BlbklmcmFtZSgpO1xuICAgIHRoaXMuaXNQYXlpbmcgPSB0cnVlO1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHZhbGRhdGVJbnB1dChvYmo6IFBheXN0YWNrT3B0aW9ucykge1xuICAgIGlmICghdGhpcy5jYWxsYmFjay5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gJ0FOR1VMQVItUEFZU1RBQ0s6IEluc2VydCBhIGNhbGxiYWNrIG91dHB1dCBsaWtlIHNvIChjYWxsYmFjayk9XFwnUGF5bWVudENvbXBsZXRlKCRldmVudClcXCcgdG8gY2hlY2sgcGF5bWVudCBzdGF0dXMnO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wYXlzdGFja1NlcnZpY2UuY2hlY2tJbnB1dChvYmopO1xuICB9XG5cbiAgZ2VuZXJhdGVPcHRpb25zKG9iajogUGF5c3RhY2tPcHRpb25zKSB7XG4gICAgdGhpcy5fcGF5c3RhY2tPcHRpb25zID0gdGhpcy5wYXlzdGFja1NlcnZpY2UuZ2V0UGF5c3RhY2tPcHRpb25zKG9iaik7XG4gICAgdGhpcy5fcGF5c3RhY2tPcHRpb25zLm9uQ2xvc2UgPSAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5vbkNsb3NlLm9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5pc1BheWluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLm9uQ2xvc2UuZW1pdCgpO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5fcGF5c3RhY2tPcHRpb25zLmNhbGxiYWNrID0gKC4uLnJlc3BvbnNlKSA9PiB7XG4gICAgICB0aGlzLmlzUGF5aW5nID0gZmFsc2U7XG4gICAgICB0aGlzLmNhbGxiYWNrLmVtaXQoLi4ucmVzcG9uc2UpO1xuICAgIH07XG4gIH1cblxufVxuIl19